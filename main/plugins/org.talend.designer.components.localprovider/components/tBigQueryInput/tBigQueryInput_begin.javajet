<%@ jet
	    imports="
		org.talend.core.model.process.INode 	
		org.talend.core.model.process.ElementParameterParser 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List
	    "
%>
	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/Log4jFileUtil.javajet"%>
	<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;

	INode node = (INode)codeGenArgument.getArgument();

	String cid = node.getUniqueName();

	String clientId = ElementParameterParser.getValue(node,"__CLIENT_ID__");
	String clientSecret = ElementParameterParser.getValue(node,"__CLIENT_SECRET__");
	String projectId = ElementParameterParser.getValue(node,"__PROJECT_ID__");
	String authorizationCode = ElementParameterParser.getValue(node,"__AUTHORIZATION_CODE__");
	String query = ElementParameterParser.getValue(node,"__QUERY__");
	query = query.replaceAll("\n"," ");
	query = query.replaceAll("\r"," ");
	
    String tokenFile = ElementParameterParser.getValue(node,"__TOKEN_NAME__");
    boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
	%>
	final String CLIENT_ID_<%=cid %> = <%=clientId %>;
	
	<%
	String passwordFieldName = "__CLIENT_SECRET__";
	%>

	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
	
	final String CLIENT_SECRET_<%=cid%> = "{\"web\": {\"client_id\": \""+<%=clientId%>+"\",\"client_secret\": \"" +decryptedPassword_<%=cid%>+ "\",\"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\"token_uri\": \"https://accounts.google.com/o/oauth2/token\"}}";
	final String PROJECT_ID_<%=cid %> = <%=projectId %>;

	// Static variables for API scope, callback URI, and HTTP/JSON functions
	final List<String> SCOPES_<%=cid%> = java.util.Arrays.asList("https://www.googleapis.com/auth/bigquery");
	final String REDIRECT_URI_<%=cid%> = "urn:ietf:wg:oauth:2.0:oob";
	final com.google.api.client.http.HttpTransport TRANSPORT_<%=cid %> = new com.google.api.client.http.javanet.NetHttpTransport();
	final com.google.api.client.json.JsonFactory JSON_FACTORY_<%=cid %> = new com.google.api.client.json.jackson2.JacksonFactory();

	com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets clientSecrets_<%=cid%> = com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets.load(
					new com.google.api.client.json.jackson2.JacksonFactory(), new java.io.InputStreamReader(new java.io.ByteArrayInputStream(
							CLIENT_SECRET_<%=cid%>.getBytes())));

	com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow flow_<%=cid%> = null;
	com.google.api.services.bigquery.Bigquery bigqueryclient_<%=cid%> = null;
	long nb_line_<%=cid%> = 0;
	<%
	if(isLog4jEnabled){
	%>
		log.info("<%=cid%> - Service Account Scopes [https://www.googleapis.com/auth/bigquery]");
		log.info("<%=cid%> - Redirect uris [urn:ietf:wg:oauth:2.0:oob]");
		log.info("<%=cid%> - Attempt to load existing refresh token.");
	<%
	}
	%>

	// Attempt to load existing refresh token
    String tokenFile_<%=cid %> = <%=tokenFile%>;
	java.util.Properties properties_<%=cid%> = new java.util.Properties();
	try {
		java.io.FileInputStream inputStream_<%=cid%> = new java.io.FileInputStream(tokenFile_<%=cid %>);
		properties_<%=cid%>.load(inputStream_<%=cid%>);
		inputStream_<%=cid%>.close();
	} catch (java.io.FileNotFoundException e_<%=cid%>) {
		<%
    	if(isLog4jEnabled){
		%>
			log.warn("<%=cid%> - "+e_<%=cid%>.getMessage());
		<%
		}
    	%>
	} catch (java.io.IOException ee_<%=cid%>) {
		<%
    	if(isLog4jEnabled){
		%>
			log.warn("<%=cid%> - "+ee_<%=cid%>.getMessage());
		<%
		}
    	%>
	}
	String storedRefreshToken_<%=cid%> = (String) properties_<%=cid%>.get("refreshtoken");

	// Check to see if the an existing refresh token was loaded.
	// If so, create a credential and call refreshToken() to get a new
	// access token.
	if (storedRefreshToken_<%=cid%> != null) {
		// Request a new Access token using the refresh token.
		com.google.api.client.googleapis.auth.oauth2.GoogleCredential credential_<%=cid%> = new com.google.api.client.googleapis.auth.oauth2. GoogleCredential.Builder().setTransport(TRANSPORT_<%=cid%>)
				.setJsonFactory(JSON_FACTORY_<%=cid%>).setClientSecrets(clientSecrets_<%=cid%>)
				.build().setFromTokenResponse(new com.google.api.client.auth.oauth2.TokenResponse().setRefreshToken(storedRefreshToken_<%=cid%>));

		credential_<%=cid%>.refreshToken();
		<%
		if(isLog4jEnabled){
		%>
			log.info("<%=cid%> - An existing refresh token was loaded.");
		<%
		}
		%>
		bigqueryclient_<%=cid%> = new com.google.api.services.bigquery.Bigquery.Builder(new com.google.api.client.http.javanet.NetHttpTransport(),new com.google.api.client.json.jackson2.JacksonFactory(),credential_<%=cid%>).setApplicationName("Talend").build();
	} else {
		<%
		if(isLog4jEnabled){
		%>
			log.info("<%=cid%> - The refresh token does not exist.");
		<%
		}
		%>
		String authorizationCode_<%=cid%> = <%=authorizationCode%>;
		if(authorizationCode_<%=cid%> == null || "".equals(authorizationCode_<%=cid%>) || "\"\"".equals(authorizationCode_<%=cid%>)) {
			String authorizeUrl_<%=cid%> = new com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeRequestUrl(
					clientSecrets_<%=cid%>, REDIRECT_URI_<%=cid%>, SCOPES_<%=cid%>).setState("").build();

			System.out
					.println("Paste this URL into a web browser to authorize BigQuery Access:\n"
							+ authorizeUrl_<%=cid%>);
			<%
	    	if(isLog4jEnabled){
			%>
				log.warn("<%=cid%> - Paste this URL into a web browser to authorize BigQuery Access:\n"
								+ authorizeUrl_<%=cid%>);
			<%
			}
	    	%>
			throw new java.lang.Exception("Authorization Code error");
		} else {
			<%
			if(isLog4jEnabled){
			%>
				log.info("<%=cid%> - Exchange the auth code for an access token and refesh token.");
			<%
			}
			%>
			// Exchange the auth code for an access token and refesh token
			if (flow_<%=cid%> == null) {
				flow_<%=cid%> = new com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder(new com.google.api.client.http.javanet.NetHttpTransport(),
						new com.google.api.client.json.jackson2.JacksonFactory(), clientSecrets_<%=cid%>, SCOPES_<%=cid%>)
						.setAccessType("offline").setApprovalPrompt("force")
						.build();
			}
			com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse response_<%=cid%> = flow_<%=cid%>.newTokenRequest(authorizationCode_<%=cid%>).setRedirectUri(REDIRECT_URI_<%=cid%>).execute();
			com.google.api.client.auth.oauth2.Credential credential_<%=cid%> = flow_<%=cid%>.createAndStoreCredential(response_<%=cid%>, null);

			<%
			if(isLog4jEnabled){
			%>
				log.info("<%=cid%> - Store the refresh token for future use.");
			<%
			}
			%>
			// Store the refresh token for future use.
			java.util.Properties storeProperties_<%=cid%> = new java.util.Properties();
			storeProperties_<%=cid%>.setProperty("refreshtoken", credential_<%=cid%>.getRefreshToken());
			java.io.FileOutputStream outputStream_<%=cid%> = new java.io.FileOutputStream(tokenFile_<%=cid %>);
			storeProperties_<%=cid%>.store(outputStream_<%=cid%>,null);
			if (outputStream_<%=cid%> != null) {
			    outputStream_<%=cid%>.close();
			}

			bigqueryclient_<%=cid%> = new com.google.api.services.bigquery.Bigquery.Builder(new com.google.api.client.http.javanet.NetHttpTransport(),new com.google.api.client.json.jackson2.JacksonFactory(),credential_<%=cid%>).build();
		}
	}


	// Start a Query Job
	String querySql_<%=cid %> = <%=query %>;
	System.out.format("Running Query : %s\n", querySql_<%=cid %>);
	<%
	if(isLog4jEnabled){
	%>
		log.debug("<%=cid%> - Running Query: "+querySql_<%=cid %>);
	<%
	}
	%>
	com.google.api.services.bigquery.model.Job job_<%=cid %> = new com.google.api.services.bigquery.model.Job();
	com.google.api.services.bigquery.model.JobConfiguration config_<%=cid %> = new com.google.api.services.bigquery.model.JobConfiguration();
	com.google.api.services.bigquery.model.JobConfigurationQuery queryConfig_<%=cid %> = new com.google.api.services.bigquery.model.JobConfigurationQuery();
	config_<%=cid %>.setQuery(queryConfig_<%=cid %>);

	job_<%=cid %>.setConfiguration(config_<%=cid %>);
	queryConfig_<%=cid %>.setQuery(querySql_<%=cid %>);
	
	com.google.api.services.bigquery.model.Job insert_<%=cid %> = null;
	com.google.api.services.bigquery.model.JobReference jobId_<%=cid %> = null;
	try {
		insert_<%=cid %> = bigqueryclient_<%=cid %>.jobs().insert(PROJECT_ID_<%=cid %>, job_<%=cid %>).execute();
		jobId_<%=cid %> = insert_<%=cid %>.getJobReference();
	} catch (com.google.api.client.googleapis.json.GoogleJsonResponseException e_<%=cid%>) {
		try {
			java.io.File f_<%=cid%> = new java.io.File(tokenFile_<%=cid %>);
			boolean isRemoved_<%=cid%> = f_<%=cid%>.delete();
			if(isRemoved_<%=cid%>){
				<%
		    	if(isLog4jEnabled){
				%>
					log.error("<%=cid%> - Unable to connect. This might come from the token expiration. Execute again the job with an empty authorization code.");
				<%
				}
		    	%>
				System.err.println("---> Unable to connect. This might come from the token expiration. Execute again the job with an empty authorization code.");
			}else{
				throw new java.lang.Exception();
			}
		} catch (java.lang.Exception ee_<%=cid%>) {
			<%
	    	if(isLog4jEnabled){
			%>
				log.error("<%=cid%> - Unable to connect. This might come from the token expiration. Remove the file " + tokenFile_<%=cid %> + " Execute again the job with an empty authorization code.");
			<%
			}
	    	%>
			System.err.println("---> Unable to connect. This might come from the token expiration. Remove the file " + tokenFile_<%=cid %> + " Execute again the job with an empty authorization code.");
		}
		throw e_<%=cid%>;
	}
	<%
	if(isLog4jEnabled){
	%>
		log.info("<%=cid%> - Wait for query execution");
	<%
	}
	%>
	// wait for query execution
	while (true) {
		com.google.api.services.bigquery.model.Job pollJob_<%=cid %> = bigqueryclient_<%=cid %>.jobs().get(PROJECT_ID_<%=cid %>, jobId_<%=cid %>.getJobId()).execute();
		if (pollJob_<%=cid %>.getStatus().getState().equals("DONE")) {
			break;
		}
		// Pause execution for one second before polling job status again, to 
		// reduce unnecessary calls to the BigQUery API and lower overall
		// application bandwidth.
		Thread.sleep(1000);
	}

	<%
	if(isLog4jEnabled){
	%>
		log.info("<%=cid%> - Retrieving records from dataset.");
	<%
	}
	%>
	String pageToken_<%=cid%> = null;
	while (true) {
		// Fetch Results
		com.google.api.services.bigquery.model.TableDataList dataList_<%=cid %> = bigqueryclient_<%=cid%>.tabledata()
					.list(PROJECT_ID_<%=cid %>,
							insert_<%=cid %>.getConfiguration().getQuery()
									.getDestinationTable().getDatasetId(),
							insert_<%=cid %>.getConfiguration().getQuery()
									.getDestinationTable().getTableId())
					.setPageToken(pageToken_<%=cid%>).execute();
		
		List<com.google.api.services.bigquery.model.TableRow> rows_<%=cid %> = dataList_<%=cid %>.getRows();

		if(rows_<%=cid %> == null) {
			// Means there is no record.
			rows_<%=cid %> = new java.util.ArrayList<com.google.api.services.bigquery.model.TableRow>();
		}
		
		for (com.google.api.services.bigquery.model.TableRow row_<%=cid %> : rows_<%=cid %>) {
			java.util.List<com.google.api.services.bigquery.model.TableCell> field_<%=cid %> = row_<%=cid %>.getF();
			Object value_<%=cid%> = null;
			nb_line_<%=cid%> ++;
		<%
		List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
		if (conns != null){
			if (conns.size()>0){
				IConnection conn =conns.get(0);
				String connName = conn.getName();
				if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
					List<IMetadataTable> metadatas = node.getMetadataList();
					if ((metadatas!=null) && (metadatas.size() > 0)) {
						IMetadataTable metadata = metadatas.get(0);
						if (metadata != null) {
							String encoding = ElementParameterParser.getValue(node,"__ENCODING__");
							String advancedSeparatorStr = ElementParameterParser.getValue(node, "__ADVANCED_SEPARATOR__");
							boolean advancedSeparator = (advancedSeparatorStr!=null&&!("").equals(advancedSeparatorStr))?("true").equals(advancedSeparatorStr):false;
							String thousandsSeparator = ElementParameterParser.getValueWithJavaType(node, "__THOUSANDS_SEPARATOR__", JavaTypesManager.CHARACTER);
							String decimalSeparator = ElementParameterParser.getValueWithJavaType(node, "__DECIMAL_SEPARATOR__", JavaTypesManager.CHARACTER);
						
							List<IMetadataColumn> columns = metadata.getListColumns();
							int nbColumns = columns.size();
							for (int i = 0; i < nbColumns; i++ ) {
								IMetadataColumn column = columns.get(i);
								String columnName = column.getLabel();
							
								String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
								JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
								String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern(); 
								%>
								value_<%=cid%> = field_<%=cid %>.get(<%=i%>).getV();
								if(com.google.api.client.util.Data.isNull(value_<%=cid%>)) value_<%=cid%> = null;
								if(value_<%=cid%> != null){
									
									<%
									if (javaType == JavaTypesManager.STRING) {
									%>
										<%=connName%>.<%=columnName%> = value_<%=cid%>.toString();
									<%
									}else if (javaType == JavaTypesManager.OBJECT) {
									%>		
										<%=connName%>.<%=columnName%> = value_<%=cid%>;
									<%		
									} else if(javaType == JavaTypesManager.DATE) {						
									%>					
										<%=connName%>.<%=columnName%> = ParserUtils.parseTo_Date(value_<%=cid%>.toString(), <%= patternValue %>);				
									<%		
									}else if(advancedSeparator && JavaTypesManager.isNumberType(javaType)) { 
									%>
										<%=connName%>.<%=columnName%> = ParserUtils.parseTo_<%= typeToGenerate %>(ParserUtils.parseTo_Number(value_<%=cid%>.toString(), <%= thousandsSeparator %>, <%= decimalSeparator %>));
									<%
									} else if(javaType == JavaTypesManager.BYTE_ARRAY) { 
									%>							
										<%=connName%>.<%=columnName%> = value_<%=cid%>.toString().getBytes(<%=encoding %>);
									<%
									} else {
									%>
										<%=connName%>.<%=columnName%> = ParserUtils.parseTo_<%= typeToGenerate %>(value_<%=cid%>.toString());
									<%
									}
									%>
								}else{
									<%=connName%>.<%=columnName%> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate, column.getDefault())%>;
								}
							<%
							}
							log4jFileUtil.debugRetriveData(node);
						}
					}
				}
			}
		}
		%>
